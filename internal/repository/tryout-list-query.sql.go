// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tryout-list-query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTryoutById = `-- name: GetTryoutById :one
SELECT id, title, description, long_description, category, duration, difficulty, passing_score, max_attempt, topics, creator_id, created_at, is_published FROM tryout
WHERE id = $1
`

func (q *Queries) GetTryoutById(ctx context.Context, id pgtype.UUID) (*Tryout, error) {
	row := q.db.QueryRow(ctx, getTryoutById, id)
	var i Tryout
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.LongDescription,
		&i.Category,
		&i.Duration,
		&i.Difficulty,
		&i.PassingScore,
		&i.MaxAttempt,
		&i.Topics,
		&i.CreatorID,
		&i.CreatedAt,
		&i.IsPublished,
	)
	return &i, err
}

const getTryoutList = `-- name: GetTryoutList :many
SELECT id, title, description, long_description, category, duration, difficulty, passing_score, max_attempt, topics, creator_id, created_at, is_published FROM tryout
WHERE (is_published = true OR creator_id = $1)
ORDER BY created_at DESC
`

func (q *Queries) GetTryoutList(ctx context.Context, creatorID pgtype.UUID) ([]*Tryout, error) {
	rows, err := q.db.Query(ctx, getTryoutList, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tryout{}
	for rows.Next() {
		var i Tryout
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LongDescription,
			&i.Category,
			&i.Duration,
			&i.Difficulty,
			&i.PassingScore,
			&i.MaxAttempt,
			&i.Topics,
			&i.CreatorID,
			&i.CreatedAt,
			&i.IsPublished,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTryoutListFiltered = `-- name: GetTryoutListFiltered :many
SELECT id, title, description, long_description, category, duration, difficulty, passing_score, max_attempt, topics, creator_id, created_at, is_published FROM tryout
WHERE (is_published = true OR creator_id = $1)
AND difficulty = $2
AND category = $3
AND title ILIKE '%' || $4 || '%'
ORDER BY created_at DESC
`

type GetTryoutListFilteredParams struct {
	CreatorID  pgtype.UUID
	Difficulty pgtype.Text
	Category   pgtype.Text
	Column4    pgtype.Text
}

func (q *Queries) GetTryoutListFiltered(ctx context.Context, arg *GetTryoutListFilteredParams) ([]*Tryout, error) {
	rows, err := q.db.Query(ctx, getTryoutListFiltered,
		arg.CreatorID,
		arg.Difficulty,
		arg.Category,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tryout{}
	for rows.Next() {
		var i Tryout
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LongDescription,
			&i.Category,
			&i.Duration,
			&i.Difficulty,
			&i.PassingScore,
			&i.MaxAttempt,
			&i.Topics,
			&i.CreatorID,
			&i.CreatedAt,
			&i.IsPublished,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
