// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tryout-question-query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTryoutQuestionsByTryoutId = `-- name: GetTryoutQuestionsByTryoutId :many
WITH mcq_questions AS (
    SELECT
        q.id,
        q.tryout_id,
        q.question AS text,
        'multiple_choice' AS type,
        json_agg(
            json_build_object(
                'id', o.id,
                'text', o.option
            )
        ) AS options,
        q.points
    FROM tryout_mcq_questions q
    LEFT JOIN tryout_mcq_options o ON q.id = o.question_id
    GROUP BY q.id
),
essay_questions AS (
    SELECT
        id,
        tryout_id,
        question AS text,
        'essay' AS type,
        '[]'::json AS options, -- Cast NULL to empty JSON array
        points
    FROM tryout_essay_questions
)
SELECT json_agg(
    json_build_object(
        'id', q.id,
        'tryoutId', q.tryout_id,
        'text', q.text,
        'type', q.type,
        'options', q.options,
        'points', q.points
    )
) AS questions
FROM (
    SELECT id, tryout_id, text, type, options, points FROM mcq_questions
    UNION ALL
    SELECT id, tryout_id, text, type, options, points FROM essay_questions
) q
WHERE q.tryout_id = $1
`

func (q *Queries) GetTryoutQuestionsByTryoutId(ctx context.Context, tryoutID pgtype.UUID) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getTryoutQuestionsByTryoutId, tryoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var questions []byte
		if err := rows.Scan(&questions); err != nil {
			return nil, err
		}
		items = append(items, questions)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
